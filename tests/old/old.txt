#include <pspkernel.h>
#include <pspdebug.h>
#include <pspgu.h>
#include <pspgum.h>
#include <pspdisplay.h>
#include <pspge.h>
#include <stdio.h>
#include <stdlib.h>
#include <pspctrl.h>


// REDEFININDO NOMES
#define printDebug pspDebugScreenPrintf
#define clearScreen pspDebugScreenClear

// Define o módulo principal do PSP
PSP_MODULE_INFO("My PSP App", PSP_MODULE_USER, 1, 0);
PSP_MAIN_THREAD_ATTR(THREAD_ATTR_USER);

void *fbp0; // Cria buffer pra imagem (global)

// PSP CRAZY STUFF FUNCTIONS
/* Exit callback */
int exit_callback(int arg1, int arg2, void *common) {
          sceKernelExitGame();
          return 0;
}

/* Callback thread */
int CallbackThread(SceSize args, void *argp) {
          int cbid;

          cbid = sceKernelCreateCallback("Exit Callback", exit_callback, NULL);
          sceKernelRegisterExitCallback(cbid);

          sceKernelSleepThreadCB();

          return 0;
}

/* Sets up the callback thread and returns its thread id */
int SetupCallbacks(void) {
          int thid = 0;

          thid = sceKernelCreateThread("update_thread", CallbackThread, 0x11, 0xFA0, 0, 0);
          if(thid >= 0) {
                    sceKernelStartThread(thid, 0, 0);
          }

          return thid;
}


void loadImageToBuffer(const char* filename, void* buffer, int width, int height)
{
    FILE* file = fopen(filename, "rb");
    if (!file)
    {
        printDebug("Erro ao abrir a imagem %s\n", filename);
        return;
    }
    /*
    fread le os dados binarios do arquivo
    supondo que a imagem tenha 32bits por pixel, cada pixel ocupa 4 bytes. 
    O tamanho total a ser lido é: total = largura x altura x 4
    
    */
    fread(buffer, width * height * 4, 1, file);
    fclose(file);
}

void screen1()
{
    clearScreen();
    //printDebug("SCREEN 1: Press X to go to main screen.");
    loadImageToBuffer("assets/test2.bmp", fbp0, 480, 272);
    while(1)
    {
        SceCtrlData pad;
        sceCtrlReadBufferPositive(&pad, 1);
        if (pad.Buttons & PSP_CTRL_CROSS)
            break;
    }
}

void screen2()
{
    pspDebugScreenClear();
    printDebug("TIMER\n");
    printDebug("Press [X] TO START THE TIMER\n");
    SceCtrlData pad;
    int i;
    int counter = 0;
    while(1)
    {
        sceCtrlReadBufferPositive(&pad, 1);
        if (pad.Buttons & PSP_CTRL_CROSS)
        {
           break;
        }

        while(1) {
          sceCtrlReadBufferPositive(&pad, 1);
          if(pad.Buttons & PSP_CTRL_CIRCLE) {
                    break;
          }

          clearScreen();
          printf("Press [O] To Stop the Timer\n");
          printf("Counter: %i", counter);
          counter++;
          for(i = 0; i < 5; i++)
          {
            sceDisplayWaitVblankStart();
          }
        }
    }
    pspDebugScreenClear();
    printf("Contador concluído.");
    printf("Contagem final: %i", counter);
}


int main() {
    pspDebugScreenInit();
    SetupCallbacks();
    // Inicializa o GU (Graphics Utility) do PSP, que controla o hardware gráfico.
    sceGuInit(); 
    // Inicia a RENDERIZAÇÃO gráfica diretamente para o framebuffer fbp0
    sceGuStart(GU_DIRECT, fbp0);
    /*
        Define o formato do buffer de cor como GU_PSM_8888 = 32 BITS por pixel (RGBA)
        O buffer destino para a renderização é fbp0
        512 largura do buffer de memória
    */
    sceGuDrawBuffer(GU_PSM_8888, fbp0, 512);

    sceCtrlSetSamplingCycle(0);
    sceCtrlSetSamplingMode(PSP_CTRL_MODE_ANALOG);
    /*
    Retorna o endereço inicial da memoria VRAM (EDRAM) do PSP
    fbp0 agora aponta para a região da memoria onde os gráficos serão armazenados
    */
    fbp0 = sceGeEdramGetAddr();

    while(1)
    {
        pspDebugScreenClear();

        // Alterna entre dois buffers para evitar flickering (tela tremendo).
        // No contexto atual, o buffer de renderização é atualizado continuamente.
        sceGuSwapBuffers();

        printDebug("1. TRIANGLE go to screen 1\n");
        printDebug("2. CIRCLE go to screen 1\n");
        printDebug("3. START to close\n");

        SceCtrlData pad;
        sceCtrlReadBufferPositive(&pad, 1);

        if (pad.Buttons & PSP_CTRL_TRIANGLE)
            screen1();
        else if (pad.Buttons & PSP_CTRL_CIRCLE)
            screen2();
        else if (pad.Buttons & PSP_CTRL_START)
            break;
            
    }

    sceGuTerm(); // Encerra o GU, liberando os recursos gráficos
    sceKernelSleepThread(); // Mantém a aplicação ativa

    //sceKernelExitGame(); //Finaliza o aplicativo e retorna ao menu XMB do PSP.


    return 0;
}
